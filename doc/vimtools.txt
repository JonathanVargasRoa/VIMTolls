*vimtools.txt*                         swiss army knife plugin for (Neo)vim
                                                      *VimTools* *:vimools*


                               ╔═╦═╦═╗
                        ╔════╗ ║║║║║╔╝
                        ║╔╗╔╗║ ║║║║║╚╗
                        ╚╝║║╚╝ ║╠═╩╩═╝
                          ║╠═╦═╣╚╦═╦╦═╦╗╔═╦═╦╦╗
                          ║║╩╣═╣║║║║║╬║╚╣╬║╬║║║
                          ╚╩═╩═╩╩╩╩═╩═╩═╩═╬╗╠╗║
                                          ╚═╩═╝

============================================================================
CONTENTS                                                *VimToolsContents*

    1. Intro ...................... |VimToolsIntro|
    2. Commands .................. |VimToolsCommands|
    3. Mappings ................... |VimToolsMappings|
    4. Configuration .............. |VimToolsConfig|
        4.1 VimTools_activate ......... |VimToolsConfig_activate|
        4.2 VimTools_map .............. |VimToolsConfig_map|
    5. License .................... |VimToolsLicense|
    6. Bugs ....................... |VimToolsBugs|
    7. Contributing ............... |VimToolsContributing|
    8. Changelog .................. |VimToolsChangelog|
    9. Credits .................... |VimToolsCredits|

============================================================================
1. Intro                                                     *VimToolsIntro*

vimtools is a tool to complement your editor favorite text / code vim, vi, nvim, Gvim or MacVim.
vimtools is fast and lightweight written in 100% vimscript with no outside dependencies.


vimtools is a set of functions and settings that will make it easy for you life. You are the one who decides what function or command is executed either automatically or by calling through the cmd of vim / nvim. That is why all the variables are available for you set the vimtools to your liking.

vimtools some features:
    >
    VimToolsMaxWindows the current window to have a more extended view of the information
    VimToolsSpellMorseIdioms the best Spell administrator for VIM, using a dictionary in Vim was never so easy
    VimToolsAssistant the best Asistant for the documentation for Vimscript
    Rapid access to your VIMRC or to your init.vim
    VimToolsState a preview to the information of your script
    VimToolsMakeDirectories automatic directories for spell, backup copies, folding and others. You no longer have to worry about the annoying temporary files of backup copies, now everything is focused on a single place "$HOME/vimtools_tmp"
    VimToolsMatheModus asistant for Mathematical Symbols
    VimToolsEasyComment an indispensable complement to comment with the proper format
    Others
<

============================================================================
2. Commands                                               *VimToolsCommands*
                                                    *VimToolsSpellMorse*
                                                    *VimToolsSpellMorseIdioms*
                                                    *VimToolsSpellMorseMaps*
When SpellMorse is activated,
then you can make movements with the following keys.
                        >
                        Input -> Output
                        mm -> menu (z=)
                        e -> next word (]s)
                        n -> next word (]s)
                        N -> previus word ([S)
                        b -> previus word ([S)
                        a -> add word (zg)
                        A -> quit word (zug)
                        w -> quit bad word (zw)
                        W -> undo quit bad word (zuw)
                        , -> selection first option (1z=)
                        . -> selection second option (2z=)
                        - -> selection third option (3z=)
<
                                                        *VimToolsSpellMorse*
Spell is a complement that is available to VIM, SpellMorse helps you from a
very easy and intuitive to use it. In normal mode, simply press <TAB> + .
Torque Aactivar the plugin and once activated you can change language with
<TAB> + ,.

You can change to the language of your preference, consultation your language
in specific here -> http://vimdoc.sourceforge.net/htmldoc/spell.html.
Once you know which will be the default language, you can
switch it by simply by modifying the word by the language of your
preference. For example:
                        >
                        en -> all regions
                        en_au -> Australia
                        en_ca -> Canada
                        en_gb -> Great Britain
                        en_nz -> New Zealand
                        en_us -> USA
                        de -> all German words accepted
                        de_de -> old and new spelling
                        de_19 -> old spelling
                        de_20 -> new spelling
                        de_at -> Austria
                        de_ch -> Switzerland
<
                                                        *VimToolsMatheModus*
With this plugin you can acquire mathematical unicode symbols simply
by typing the abbreviation according to your symbol.
These are the keywords added so far.
                        >
                        Input -> Output (INSERT MODUS)
                        eps -> ε
                        theta -> θ
                        kappa -> κ
                        pi -> π
                        rho -> ρ
                        phi -> φ
                        sigma -> σ
                        beta -> β
                        alpha -> α
                        delta -> ∆
                        sum -> ∑
                        ang -> å
                        Ang -> Å
                        sqr -> √
                        int -> ∫
                        micra -> µ
                        omega -> Ω
                        fun -> ƒ
                        lam -> λ
<

                                                        *VimToolsMaxWindows*
Enlarge and restore the current window.

                                                       *VimToolsCleanUndoDir*
                                                    *VimToolsMakeDirectories*
With this add-on you can clean the "Undo" folder with the files
that have more than 90 days of existing,
if you want them to keep the archives simply do not invoke this command.

                                                       *VimToolsEasyComment*

                                                             *VimToolsState*


============================================================================
3. Mappings                                               *VimToolsMappings*
Maping recommended
    >
    " on/off SpellMorse
    nnoremap <silent> <TAB>. :setlocal spell! spelllang=en \| VimToolsSpellMorseIdiomsMaps<CR>
    " next language
    nnoremap <silent> <TAB>, :VimToolsSpellMorseIdioms<CR>
    " on/off MatheModus
    inoremap <silent> <TAB>m <Esc>:VimToolsMatheModus<CR>i<RIGHT>
    " on/off MaxWindows
    nnoremap <silent> <Leader>m :VimToolsMaxWindows<CR>
<

============================================================================
4. Configuration                                            *VimToolsConfig*

----------------------------------------------------------------------------
4.1 g:vimtools_loaded                              *VimToolsConfig_activate*
                                                         *g:vimtools_loaded*
                                    With this global variable you
                                    can activate and deactivate
                                    all VimTools functions.
    >
    " 1 = activate 0 = deactivate
    let g:vimtools_loaded = 1
<
                                                      *g:vimtools_assistant*
                                    With this global variable you
                                    can activate and deactivate
                                    <F1>     " call documentation
                                    in VIM if it exists
                                    <S-F1>   " call HELP
                                    <F2>     " call .vimrc
                                    <S-F2>   " call init.vim

    >
    let g:vimtools_assistant = 1
<
                                      *g:vimtools_directories*
                                    With this global variable you
                                    can activate and deactivate
                                    Set Backup-Directories

    >
    let g:vimtools_directories = 1
<
                                                    *g:vimtools_mapsfolding*
                                    With this global variable you
                                    can activate and deactivate
                                    the mapping for Folding.
    >
    let g:vimtools_mapsfolding = 1
<

                                              *g:vimtools_closingbracke*
                                    With this global variable you
                                    can activate and deactivate
                                    self closing bracke or parenthesi.
    >
    let g:vimtools_closingbracke = 1
<

                                                          *g:vimtools_stateruler*
                                    With this global variable you
                                    can activate and deactivate
                                    the stateruler for the information
    >
    let g:vimtools_stateruler = 1
<

                                                     *g:vimtools_mathemodus*
                                    With this global variable you
                                    can activate and deactivate
                                    the Mathe Modus
    >
    let g:vimtools_mathemodus = 1
<

                                                    *g:vimtools_spellmorse*
                                    With this global variable you
                                    can activate and deactivate
                                    the SpellMorse
    >
    let g:vimtools_spellmorse = 1
<

                                                   *g:vimtools_easycomment*
                                    With this global variable you
                                    can activate and deactivate
                                    the EasyComment
                                    Simply select in visual mode the line
                                    of code you want to comment on
                                    and then press the `R` key.
                                    This is adapted so that it works
                                    in an easy, fast and
                                    practical way in all scripts.

List of Scripts added so far:

```
vim, cpp, c, go, java, javascript, scala, php, rust, jsonc, json
python, r, ruby, sh, desktop, fstab, profile, text, tmux, make, dockerfile
bashrc, zsh, zshrc, bash_profile, gitignore, yaml, gdb, gitconfig, vimwiki
html, xml, tex, mail, dosbatch, autohotkey, lua
```

    >
    let g:vimtools_easycomment = 1
<
`Input -> Output` (VISUAL MODUS)
Select the block or line you want to comment on in visual mode
and then press the c key
- `c` -> comment in the format of `ScriptType` / `FileType`

4.2 g:vimtools_map                                      *VimToolsConfig_map*
    >
    " on/off SpellMorse
    nnoremap <silent> <TAB>. :setlocal spell! spelllang=en \| VimToolsSpellMorseIdiomsMaps<CR>
    " next language
    nnoremap <silent> <TAB>, :VimToolsSpellMorseIdioms<CR>
    " on/off MatheModus
    inoremap <silent> <TAB>m <Esc>:VimToolsMatheModus<CR>i<RIGHT>
    " on/off MaxWindows
    nnoremap <silent> <Leader>m :VimToolsMaxWindows<CR>
<

============================================================================
5. License                                                 *VimToolsLicense*

Released under the GNU General Public License v3.0.

============================================================================
6. Bugs                                                       *VimToolsBugs*

Before submitting a bug report, try upgrading to the latest version of the
plugin. The bug could have been fixed already.

If the problem persists, go to:

    https://github.com/mctechnology17/vimtools

Check the list of open issues and see if the problem you are facing has not
been reported already. You can add more information to the issue in case it
has. Otherwise, submit a new issue.

============================================================================
7. Contributing                                       *VimToolsContributing*

Contributions are welcomed and appreciated. Just follow the normal Github
procedure. Go to:

    https://github.com/mctechnology17/vimtools

Fork the project. Work on what you think would make it better. Send a pull
request.

============================================================================
7. Changelog                                             *VimToolsChangelog*

Refer to CHANGELOG.txt

============================================================================
9. Credits                                                 *VimToolsCredits*

Marcos - MC Technology
GitHub: https://github.com/mctechnology17
